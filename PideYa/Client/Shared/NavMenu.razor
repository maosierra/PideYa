@inject PideYa.Client.Services.OrderNotifierService orderNotifier
@implements IDisposable

<div class="top-row ps-3 navbar navbar-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="">PideYa</a>
        <button title="Navigation menu" class="navbar-toggler" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
    </div>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <nav class="flex-column">
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="fetchdata">
                <span class="oi oi-list-rich" aria-hidden="true"></span> Lo que hay pa hoy
            </NavLink>
        </div>
        <div class="nav-item px-3">
            <NavLink class="nav-link" href="shoppingcar">
                <span class="oi oi-cart" aria-hidden="true"></span> @NumberOfItems
            </NavLink>
        </div>
    </nav>
</div>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    private string NumberOfItems = "Confirmalo!";

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override void OnInitialized()
    {
        orderNotifier.Notify += onOrderNotification;
    }

    public void Dispose()
    {
        orderNotifier.Notify -= onOrderNotification;
    }

    private async Task onOrderNotification()
    {
        await InvokeAsync(() =>
        {
            var itemsCount = orderNotifier.Order?.OrderDetails?.Count() ?? 0;
            NumberOfItems = itemsCount > 0 ? $"Confirmalo! ({itemsCount})" : "Confirmalo!";
            StateHasChanged();
        });
    }
}

